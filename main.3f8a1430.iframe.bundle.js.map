{"version":3,"file":"main.3f8a1430.iframe.bundle.js","mappings":";AAuEA;AACA;;AAEA;AAoHA;AACA;;AAKA","sources":["webpack://@czi-sds/monorepo/./packages/components/src/core/styles/common/mixins/fonts.ts"],"sourcesContent":["import { css, SerializedStyles } from \"@emotion/react\";\nimport { TypographyStyle } from \"@mui/material\";\nimport { Typography } from \"../types\";\nimport { CommonThemeProps, getTypography } from \"../selectors/theme\";\n\ntype FontBodyWeight = keyof Typography[\"wideStyles\"][\"body\"];\ntype FontBodySize<T extends FontBodyWeight> =\n  keyof Typography[\"wideStyles\"][\"body\"][T];\n\nexport const fontBody = (\n  fontSize: FontBodySize<FontBodyWeight>,\n  fontWeight: FontBodyWeight = \"regular\",\n  isNarrow: boolean = false\n) => {\n  return (props: CommonThemeProps): SerializedStyles | null => {\n    const typography = getTypography(props);\n\n    if (!typography) return null;\n\n    const {\n      wideStyles: { body },\n      narrowStyles: { body: narrowBody },\n      fontFamily: { body: bodyFontFamily },\n    } = typography;\n\n    if (isNarrow) {\n      return css`\n        ${props.theme?.breakpoints.down(\"md\")} {\n          ${themeToCss(narrowBody[fontWeight][fontSize], bodyFontFamily)}\n        }\n      `;\n    }\n\n    return themeToCss(body[fontWeight][fontSize], bodyFontFamily);\n  };\n};\n\nexport const fontBodyL = fontBody(\"l\", \"regular\");\nexport const fontBodyM = fontBody(\"m\", \"regular\");\nexport const fontBodyS = fontBody(\"s\", \"regular\");\nexport const fontBodyXs = fontBody(\"xs\", \"regular\");\nexport const fontBodyXxs = fontBody(\"xxs\", \"regular\");\nexport const fontBodyXxxs = fontBody(\"xxxs\", \"regular\");\nexport const fontBodySemiboldL = fontBody(\"l\", \"semibold\");\nexport const fontBodySemiboldM = fontBody(\"m\", \"semibold\");\nexport const fontBodySemiboldS = fontBody(\"s\", \"semibold\");\nexport const fontBodySemiboldXs = fontBody(\"xs\", \"semibold\");\nexport const fontBodySemiboldXxs = fontBody(\"xxs\", \"semibold\");\nexport const fontBodySemiboldXxxs = fontBody(\"xxxs\", \"semibold\");\n\n// Font Caps\n\ntype FontCapsSize = keyof Typography[\"wideStyles\"][\"caps\"][\"semibold\"];\n\nexport const fontCaps = (fontSize: FontCapsSize, isNarrow: boolean = false) => {\n  return (props: CommonThemeProps): SerializedStyles | null => {\n    const typography = getTypography(props);\n\n    if (!typography) return null;\n\n    const {\n      wideStyles: { caps },\n      narrowStyles: { caps: narrowCaps },\n      fontFamily: { caps: capsFontFamily },\n    } = typography;\n\n    return css`\n      text-transform: uppercase;\n\n      ${isNarrow\n        ? css`\n            ${props.theme?.breakpoints.down(\"md\")} {\n              ${themeToCss(narrowCaps.semibold[fontSize], capsFontFamily)}\n            }\n          `\n        : themeToCss(caps.semibold[fontSize], capsFontFamily)}\n    `;\n  };\n};\n\nexport const fontCapsXxs = fontCaps(\"xxs\");\nexport const fontCapsXxxs = fontCaps(\"xxxs\");\nexport const fontCapsXxxxs = fontCaps(\"xxxxs\");\n\n// Font Header\n\ntype FontHeaderSize = keyof Typography[\"wideStyles\"][\"header\"][\"semibold\"];\n\nexport const fontHeader = (\n  fontSize: FontHeaderSize,\n  isNarrow: boolean = false\n) => {\n  return (props: CommonThemeProps): SerializedStyles | null => {\n    const typography = getTypography(props);\n\n    if (!typography) return null;\n\n    const {\n      wideStyles: { header },\n      narrowStyles: { header: narrowHeader },\n      fontFamily: { header: headerFontFamily },\n    } = typography;\n\n    if (isNarrow) {\n      return css`\n        ${props.theme?.breakpoints.down(\"md\")} {\n          ${themeToCss(narrowHeader.semibold[fontSize], headerFontFamily)}\n        }\n      `;\n    }\n\n    return themeToCss(header.semibold[fontSize], headerFontFamily);\n  };\n};\n\nexport const fontHeaderXxl = fontHeader(\"xxl\");\nexport const fontHeaderXl = fontHeader(\"xl\");\nexport const fontHeaderL = fontHeader(\"l\");\nexport const fontHeaderM = fontHeader(\"m\");\nexport const fontHeaderS = fontHeader(\"s\");\nexport const fontHeaderXs = fontHeader(\"xs\");\nexport const fontHeaderXxs = fontHeader(\"xxs\");\nexport const fontHeaderXxxs = fontHeader(\"xxxs\");\n\n// Font Code\n\ntype FontCodeWeight = keyof Typography[\"wideStyles\"][\"code\"];\ntype FontCodeSize<T extends FontCodeWeight> =\n  keyof Typography[\"wideStyles\"][\"code\"][T];\n\nexport const fontCode = (\n  fontSize: FontCodeSize<FontCodeWeight>,\n  fontWeight: FontCodeWeight = \"regular\",\n  isNarrow: boolean = false\n) => {\n  return (props: CommonThemeProps): SerializedStyles | null => {\n    const typography = getTypography(props);\n\n    if (!typography) return null;\n\n    const {\n      wideStyles: { code },\n      narrowStyles: { code: narrowCode },\n      fontFamily: { code: codeFontFamily },\n    } = typography;\n\n    if (isNarrow) {\n      return css`\n        ${props.theme?.breakpoints.down(\"md\")} {\n          ${themeToCss(narrowCode[fontWeight][fontSize], codeFontFamily)}\n        }\n      `;\n    }\n\n    return themeToCss(code[fontWeight][fontSize], codeFontFamily);\n  };\n};\n\nexport const fontCodeXs = fontCode(\"xs\", \"regular\");\nexport const fontCodeS = fontCode(\"s\", \"regular\");\nexport const fontCodeSemiboldXs = fontCode(\"xs\", \"semibold\");\nexport const fontCodeSemiboldS = fontCode(\"s\", \"semibold\");\n\n// Font Tabular\n\ntype FontTabularWeight = keyof Typography[\"wideStyles\"][\"tabular\"];\ntype FontTabularSize<T extends FontTabularWeight> =\n  keyof Typography[\"wideStyles\"][\"tabular\"][T];\n\nexport const fontTabular = (\n  fontSize: FontTabularSize<FontTabularWeight>,\n  fontWeight: FontTabularWeight = \"regular\",\n  isNarrow: boolean = false\n) => {\n  return (props: CommonThemeProps): SerializedStyles | null => {\n    const typography = getTypography(props);\n\n    if (!typography) return null;\n\n    const {\n      wideStyles: { tabular },\n      narrowStyles: { tabular: narrowTabular },\n      fontFamily: { tabular: tabularFontFamily },\n    } = typography;\n\n    return css`\n      font-variant-numeric: tabular-nums;\n\n      ${isNarrow\n        ? css`\n            ${props.theme?.breakpoints.down(\"md\")} {\n              ${themeToCss(\n                narrowTabular[fontWeight][fontSize],\n                tabularFontFamily\n              )}\n            }\n          `\n        : themeToCss(tabular[fontWeight][fontSize], tabularFontFamily)}\n    `;\n  };\n};\n\nexport const fontTabularXs = fontTabular(\"xs\", \"regular\");\nexport const fontTabularS = fontTabular(\"s\", \"regular\");\nexport const fontTabularSemiboldXs = fontTabular(\"xs\", \"semibold\");\nexport const fontTabularSemiboldS = fontTabular(\"s\", \"semibold\");\n\nfunction themeToCss(\n  fontTheme: TypographyStyle,\n  fontFamily: React.CSSProperties[\"fontFamily\"] = \"inherit\"\n) {\n  return css`\n    font-family: ${fontFamily};\n    font-size: ${fontTheme.fontSize}px;\n    line-height: ${fontTheme.lineHeight};\n    letter-spacing: ${fontTheme.letterSpacing};\n    font-weight: ${fontTheme.fontWeight};\n    text-transform: ${fontTheme.textTransform};\n  `;\n}\n"],"names":[],"sourceRoot":""}