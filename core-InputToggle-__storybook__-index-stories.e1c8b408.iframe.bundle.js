"use strict";(self.webpackChunk_czi_sds_monorepo=self.webpackChunk_czi_sds_monorepo||[]).push([[3705],{"./packages/components/src/core/InputToggle/__storybook__/index.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Controlled:()=>Controlled,Default:()=>Default,Test:()=>Test,__namedExportsOrder:()=>__namedExportsOrder,default:()=>index_stories});var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),InputToggle=__webpack_require__("./packages/components/src/core/InputToggle/index.tsx");const INPUT_TOGGLE_EXCLUDED_CONTROLS=["disabled"];var react=__webpack_require__("./node_modules/react/index.js");const ControlledDemo=props=>{const[isChecked,setIsChecked]=(0,react.useState)(!0);return(0,jsx_runtime.jsx)(InputToggle.A,{...props,checked:isChecked,onChange:function handleChange(){setIsChecked((currentChecked=>!currentChecked))}})},index_stories={argTypes:{disabled:{control:{type:"boolean"}},offLabel:{control:{type:"text"},defaultValue:"Off"},onLabel:{control:{type:"text"},defaultValue:"On"},width:{control:{type:"number"},defaultValue:62}},component:props=>(0,jsx_runtime.jsx)(InputToggle.A,{...props,inputProps:{"aria-label":"Input Toggle"}}),parameters:{axe:{disabledRules:["label"]}},title:"Components/Inputs/InputToggle"},Default={args:{disabled:!1,width:62}},Controlled={parameters:{controls:{exclude:INPUT_TOGGLE_EXCLUDED_CONTROLS},snapshot:{skip:!1}},render:args=>(0,jsx_runtime.jsx)(ControlledDemo,{...args})},Test={args:{disabled:!1},parameters:{controls:{exclude:INPUT_TOGGLE_EXCLUDED_CONTROLS},snapshot:{skip:!0}},render:args=>(0,jsx_runtime.jsx)(InputToggle.A,{...args,"data-testid":"test-toggle"})},__namedExportsOrder=["Default","Controlled","Test"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: {\n    disabled: false,\n    width: 62\n  }\n}",...Default.parameters?.docs?.source}}},Controlled.parameters={...Controlled.parameters,docs:{...Controlled.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    controls: {\n      exclude: INPUT_TOGGLE_EXCLUDED_CONTROLS\n    },\n    snapshot: {\n      /**\n       * (thuang): Take snapshot to ensure the controlled demo is working as expected.\n       */\n      skip: false\n    }\n  },\n  render: (args: Args) => <ControlledDemo {...args} />\n}",...Controlled.parameters?.docs?.source}}},Test.parameters={...Test.parameters,docs:{...Test.parameters?.docs,source:{originalSource:'{\n  args: {\n    disabled: false\n  },\n  parameters: {\n    controls: {\n      exclude: INPUT_TOGGLE_EXCLUDED_CONTROLS\n    },\n    snapshot: {\n      skip: true\n    }\n  },\n  render: (args: Args) => <RawInputToggle {...args} data-testid="test-toggle" />\n}',...Test.parameters?.docs?.source}}}},"./packages/components/src/core/InputToggle/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>core_InputToggle});var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/react/index.js"),switchClasses=__webpack_require__("./node_modules/@mui/material/Switch/switchClasses.js"),Switch=__webpack_require__("./node_modules/@mui/material/Switch/Switch.js"),emotion_styled_browser_esm=__webpack_require__("./node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js"),styles=__webpack_require__("./packages/components/src/core/styles/index.ts");const Toggle=(0,emotion_styled_browser_esm.A)(Switch.A,{target:"e1p4h7rh0"})(styles.Zo," ",(props=>{const{checked}=props;return`\n      ${(props=>{const{disabled,width=62}=props,corners=(0,styles.VP)(props),shadows=(0,styles.CG)(props),iconSizes=(0,styles.I7)(props);return`\n    cursor: ${disabled?"default":"pointer"};\n    border-radius: ${corners?.rounded}px;\n    height: 24px;\n    width: ${width}px;\n    line-height: 18px;\n    padding: 0;\n    overflow: visible;\n\n    .${switchClasses.A.switchBase} {\n      ${(0,styles.UT)(props)}\n      outline-offset: 2px !important;\n      width: 100%;\n      height: 100%;\n      border-radius: ${corners?.rounded}px;\n      font: inherit;\n      transform: unset;\n      justify-content: space-between;\n\n      .${switchClasses.A.input} {\n        width: 100%;\n        height: 100%;\n        left: 0;\n      }\n\n      &.${switchClasses.A.checked} {\n        transform: unset;\n      }\n    }\n\n    .${switchClasses.A.thumb} {\n      height: ${iconSizes?.s?.height}px;\n      width: ${iconSizes?.s?.width}px;\n      min-width: ${iconSizes?.s?.width}px;\n      box-shadow: ${shadows?.none};\n    }\n\n    .${switchClasses.A.track} {\n      opacity: 1;\n      border-radius: ${corners?.rounded}px;\n    }\n  `})(props)}\n      ${checked?(props=>{const{disabled,value}=props,borders=(0,styles.ow)(props),spaces=(0,styles.oZ)(props),semanticColors=(0,styles.Bd)(props);return`\n    & {\n      outline: ${disabled?borders?.base?.disabled:borders?.accent?.default};\n    }\n\n    .${switchClasses.A.thumb} {\n      color: ${disabled?semanticColors?.base?.ornamentDisabled:semanticColors?.accent?.ornament};\n      margin-left: ${spaces?.m}px;\n    }\n\n    .${switchClasses.A.switchBase} {\n      left: unset;\n      right: 0;\n      transform: unset;\n      padding: 0 ${spaces?.xxs}px 0 ${spaces?.xs}px;\n\n      .MuiIconButton-label {\n        margin-left: ${spaces?.s}px;\n      }\n\n      &:before {\n        color: ${disabled?semanticColors?.base?.textDisabled:semanticColors?.base?.textPrimary};\n        content: ${JSON.stringify(value)};\n      }\n\n      &:hover {\n        background-color: ${semanticColors?.accent?.surfaceSecondary};\n      }\n    }\n\n    .${switchClasses.A.track} {\n      background-color: transparent !important;\n      opacity: 1 !important;\n    }\n\n    ${!disabled&&`&:hover {\n        outline: ${borders?.accent?.hover};\n\n        .${switchClasses.A.thumb} {\n          color: ${semanticColors?.accent?.ornamentHover};\n        }\n      }`}\n  `})(props):(props=>{const{disabled,value}=props,borders=(0,styles.ow)(props),spaces=(0,styles.oZ)(props),semanticColors=(0,styles.Bd)(props);return`\n    & {\n      outline: ${disabled?borders?.base?.disabled:borders?.base?.default};\n    }\n\n    .${switchClasses.A.thumb} {\n      color: ${disabled?semanticColors?.base?.ornamentDisabled:semanticColors?.base?.ornamentSecondary};\n      margin-right: ${spaces?.m}px;\n    }\n\n    .${switchClasses.A.switchBase} {\n      right: unset;\n      left: 0;\n      transform: unset;\n      padding: 0 ${spaces?.xs}px 0 ${spaces?.xxs}px;\n\n      .MuiIconButton-label {\n        margin-right: ${spaces?.s}px;\n      }\n\n      &:after {\n        color: ${disabled?semanticColors?.base?.textDisabled:semanticColors?.base?.textSecondary};\n        content: ${JSON.stringify(value)};\n      }\n\n      &:hover {\n        background-color: ${semanticColors?.base?.fillHover};\n      }\n    }\n\n    &:hover {\n      .${switchClasses.A.switchBase} {\n        &:after {\n          color: ${disabled?semanticColors?.base?.textDisabled:semanticColors?.base?.textPrimary};\n        }\n      }\n    }\n\n    .${switchClasses.A.track} {\n      background-color: transparent !important;\n      opacity: 1 !important;\n    }\n\n    ${!disabled&&`&:hover {\n        outline: ${borders?.base?.hover};\n\n        .${switchClasses.A.thumb} {\n          color: ${semanticColors?.base?.ornamentSecondaryHover};\n        }\n      }`}\n  `})(props)}\n    `})),core_InputToggle=props=>{const isControlled=void 0!==props.checked,[checked,setChecked]=(0,react.useState)(!1),finalChecked=isControlled?props.checked:checked,{offLabel="Off",onChange,onLabel="On",...rest}=props,labelValue=finalChecked?onLabel:offLabel;return(0,jsx_runtime.jsx)(Toggle,{checked:finalChecked,color:"primary",onChange:e=>{setChecked((currentChecked=>!currentChecked)),onChange?.(e)},value:labelValue,...rest})}}}]);