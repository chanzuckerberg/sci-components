{"version":3,"file":"core-HeatmapChart-__storybook__-index-stories.e84eebb8.iframe.bundle.js","mappings":";AAiFA;AACA;AAKA;AACA;AAKA;AACA;AAsEA;AACA;AAEA;AACA;AAsBA;AACA;ACrKA;AAWA;AAGA;AACA;AAUA;AAGA;AACA;AAUA;AAGA;AACA;AAUA;AAGA;AACA;;AC1DA;;;;AAcA;AAGA;AACA;AAGA;;AAGA;AAEA;;;AAKA;AAEA;AAGA;;AAEA;;AAGA;AAEA;;;;;AAKA;;AC/CA;AAGA;AACA;;AAEA;;AAGA;AAGA;;AAEA;;;AAaA;;;;;;;;;AASA;AAWA;;AAIA;;;AAgBA;AACA;;AAEA;;;AAIA;;;;AAIA;;;;AAiBA;;;;;;AAMA;;;AAKA;;;;AAMA;;AAGA;;AAEA;AAoBA;;AAEA;AAEA;;;AAGA;AA6BA;AACA;;AAEA;;AAGA;;;;AAIA;AAkCA;;AAEA;;AAGA;;AAEA;ACpMA;;;;AAMA;;;;;AAOA;;;;;;;;;AAnCA;AAGA;;AAIA;AA6BA","sources":["webpack://@czi-sds/monorepo/./packages/components/src/core/ContentCard/style.ts","webpack://@czi-sds/monorepo/./packages/components/src/core/ContentCard/components/ContentCardTitle/style.ts","webpack://@czi-sds/monorepo/./packages/components/src/core/ContentCard/components/ContentCardImageMedia/style.ts","webpack://@czi-sds/monorepo/./packages/components/src/core/NavigationFooter/style.ts","webpack://@czi-sds/monorepo/./packages/components/src/core/NavigationFooter/components/NavItem/style.ts"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport { Card, CardContent } from \"@mui/material\";\nimport {\n  CommonThemeProps,\n  fontBodyS,\n  getSemanticColors,\n  getShadows,\n  getSpaces,\n} from \"../styles\";\nimport { css } from \"@emotion/react\";\nimport { ContentCardProps } from \"./index\";\nimport Button, { SdsMinimalButtonProps } from \"../Button\";\n\ntype CardExtraProps = Partial<ContentCardProps> & CommonThemeProps;\n\nconst doNotForwardProps = [\n  \"visualElement\",\n  \"sdsType\",\n  \"imagePosition\",\n  \"imagePadding\",\n  \"overlineText\",\n  \"titleText\",\n  \"subtitleText\",\n  \"metadataText\",\n  \"contentBlock\",\n  \"decorativeBorder\",\n  \"boundingBox\",\n  \"buttons\",\n  \"visualElementType\",\n  \"image\",\n  \"icon\",\n  \"buttonsPosition\",\n  \"clickableCard\",\n  \"imageSize\",\n  \"clickableCardProps\",\n  \"cardSdsType\",\n  \"classes\",\n];\n\nexport const StyledCard = styled(Card, {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  ${(props: CardExtraProps) => {\n    const {\n      imagePosition = \"left\",\n      sdsType = \"wide\",\n      boundingBox = true,\n      decorativeBorder = false,\n      imagePadding = false,\n      visualElementType,\n    } = props;\n\n    const semanticColors = getSemanticColors(props);\n\n    const flexDirection =\n      sdsType === \"wide\" && visualElementType === \"image\"\n        ? imagePosition === \"left\"\n          ? \"row\"\n          : \"row-reverse\"\n        : visualElementType === \"icon\"\n          ? \"row\"\n          : \"column\";\n\n    const showDecorativeBorder =\n      visualElementType === \"image\"\n        ? boundingBox && decorativeBorder && imagePadding\n        : boundingBox && decorativeBorder;\n\n    return css`\n      display: flex;\n      background-color: ${semanticColors?.base?.backgroundPrimary};\n      flex-direction: ${flexDirection};\n      box-shadow: none;\n      overflow: visible;\n\n      .MuiCardActionArea-focusHighlight {\n        background: transparent;\n      }\n\n      ${boundingBox &&\n      css`\n        border: 1px solid ${semanticColors?.base?.borderSecondary};\n      `}\n\n      ${sdsType === \"wide\" &&\n      showDecorativeBorder &&\n      css`\n        border-left: 4px solid ${semanticColors?.accent?.border};\n      `}\n\n      ${sdsType === \"narrow\" &&\n      showDecorativeBorder &&\n      css`\n        border-top: 4px solid ${semanticColors?.accent?.border};\n      `}\n    `;\n  }}\n`;\n\ntype CardActionAreaExtraProps = {\n  imagePosition?: ContentCardProps[\"imagePosition\"];\n  cardSdsType?: ContentCardProps[\"sdsType\"];\n  visualElementType?: ContentCardProps[\"visualElementType\"];\n} & SdsMinimalButtonProps &\n  CommonThemeProps;\n\nexport const StyledCardActionArea = styled(Button, {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  ${(props: CardActionAreaExtraProps) => {\n    const {\n      imagePosition = \"left\",\n      cardSdsType = \"wide\",\n      visualElementType,\n    } = props;\n\n    const semanticColors = getSemanticColors(props);\n    const shadows = getShadows(props);\n\n    const flexDirection =\n      cardSdsType === \"wide\"\n        ? imagePosition === \"left\"\n          ? \"row\"\n          : \"row-reverse\"\n        : visualElementType === \"image\"\n          ? \"column\"\n          : \"row\";\n\n    return `\n      display: flex;\n      flex-direction: ${flexDirection};\n      align-items: unset;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n      overflow: auto;\n      text-align: unset;\n\n      background-color: ${semanticColors?.base?.backgroundPrimary};\n\n      &:hover,\n      &:active {\n        background-color: ${semanticColors?.base?.surface};\n        box-shadow: ${shadows?.l} !important;\n      }\n    `;\n  }}\n`;\n\ntype VisualIconWrapperExtraProps = {\n  boundingBox?: boolean;\n  sdsType?: ContentCardProps[\"sdsType\"];\n} & CommonThemeProps;\n\nexport const StyledIconMediaWrapper = styled(\"div\", {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  ${(props: VisualIconWrapperExtraProps) => {\n    const { boundingBox = true } = props;\n    const spaces = getSpaces(props);\n\n    return css`\n      ${boundingBox\n        ? css`\n            padding: ${spaces?.xl}px 0 ${spaces?.xl}px ${spaces?.xl}px;\n          `\n        : css`\n            padding-right: ${spaces?.xl}px;\n          `}\n    `;\n  }}\n`;\n\nexport const StyledCardContent = styled(\"div\", {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  ${(props: CardExtraProps) => {\n    const { boundingBox = true } = props;\n\n    const spaces = getSpaces(props);\n\n    return css`\n      display: flex;\n      flex-direction: column;\n      min-width: 100px;\n      width: 100%;\n      height: 100%;\n\n      ${boundingBox &&\n      css`\n        padding: ${spaces?.xl}px;\n      `}\n    `;\n  }}\n`;\n\nexport const StyledContentCardBody = styled(CardContent, {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  ${fontBodyS}\n  ${(props: CardExtraProps) => {\n    const semanticColors = getSemanticColors(props);\n    const spaces = getSpaces(props);\n    return `\n      color: ${semanticColors?.base?.textPrimary};\n      margin: ${spaces?.l}px 0 0;\n      padding: 0;\n    `;\n  }}\n`;\n\nexport const StyledCardContentAligner = styled(\"div\")`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n`;\n","import { styled } from \"@mui/material\";\nimport {\n  CommonThemeProps,\n  fontBodyXxs,\n  fontCapsXxxs,\n  fontHeaderM,\n  fontHeaderXl,\n  getSemanticColors,\n  getSpaces,\n} from \"src/core/styles\";\n\nconst doNotForwardProps = [\n  \"visualElement\",\n  \"sdsType\",\n  \"imagePosition\",\n  \"imagePadding\",\n  \"overlineText\",\n  \"titleText\",\n  \"subtitleText\",\n  \"metadataText\",\n  \"contentBlock\",\n];\n\nexport const StyledTitleWrapper = styled(\"div\", {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  ${(props) => {\n    const spaces = getSpaces(props);\n\n    return `\n      display: flex;\n      flex-direction: column;\n      gap: ${spaces?.xxs}px;\n    `;\n  }}\n`;\n\nexport const StyledOverlineText = styled(\"p\", {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  ${fontCapsXxxs}\n  ${(props: CommonThemeProps) => {\n    const semanticColors = getSemanticColors(props);\n\n    return `\n      color: ${semanticColors?.base?.textSecondary};\n      margin: 0;\n    `;\n  }}\n`;\n\nexport const StyledTitleText = styled(\"p\", {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  ${fontHeaderXl}\n  ${(props: CommonThemeProps) => {\n    const semanticColors = getSemanticColors(props);\n\n    return `\n      color: ${semanticColors?.base?.textPrimary};\n      margin: 0;\n    `;\n  }}\n`;\n\nexport const StyledSubtitleText = styled(\"p\", {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  ${fontHeaderM}\n  ${(props: CommonThemeProps) => {\n    const semanticColors = getSemanticColors(props);\n\n    return `\n      color: ${semanticColors?.base?.textPrimary};\n      margin: 0;\n    `;\n  }}\n`;\n\nexport const StyledMetadataText = styled(\"p\", {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  ${fontBodyXxs}\n  ${(props: CommonThemeProps) => {\n    const semanticColors = getSemanticColors(props);\n    const spaces = getSpaces(props);\n\n    return `\n      color: ${semanticColors?.base?.textSecondary};\n      margin: ${spaces?.s}px 0 0 0;\n    `;\n  }}\n`;\n","import { CommonThemeProps, getSpaces } from \"src/core/styles\";\nimport { ContentCardProps } from \"../..\";\nimport { css, styled } from \"@mui/material\";\n\ntype VisualImageWrapperExtraProps = {\n  imagePadding?: ContentCardProps[\"imagePadding\"];\n  boundingBox?: ContentCardProps[\"boundingBox\"];\n  sdsType?: ContentCardProps[\"sdsType\"];\n  imageSize?: ContentCardProps[\"imageSize\"];\n  image?: ContentCardProps[\"image\"];\n  imagePosition?: ContentCardProps[\"imagePosition\"];\n} & CommonThemeProps;\n\nconst doNotForwardProps = [\n  \"imagePadding\",\n  \"boundingBox\",\n  \"sdsType\",\n  \"imageSize\",\n  \"image\",\n  \"imagePosition\",\n];\n\nexport const StyledImageMediaWrapper = styled(\"div\", {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  ${(props: VisualImageWrapperExtraProps) => {\n    const {\n      imagePadding = false,\n      boundingBox = true,\n      sdsType = \"wide\",\n      imagePosition = \"left\",\n    } = props;\n\n    const spaces = getSpaces(props);\n\n    return css`\n      display: flex;\n      align-items: start;\n\n      ${boundingBox\n        ? imagePadding\n          ? css`\n              padding: ${spaces?.xl}px;\n              ${imagePosition === \"left\"\n                ? `padding-right: 0;`\n                : `padding-left: 0;`}\n            `\n          : css`\n              padding: 0;\n            `\n        : css`\n            ${imagePosition === \"left\"\n              ? `padding-right: ${spaces?.xl}px;`\n              : `padding-left: ${spaces?.xl}px;`}\n          `}\n\n      ${sdsType === \"narrow\" &&\n      css`\n        ${boundingBox\n          ? imagePadding\n            ? css`\n                padding: ${spaces?.xl}px;\n                padding-bottom: 0;\n              `\n            : css`\n                padding: 0;\n              `\n          : css`\n              padding-bottom: ${spaces?.xl}px;\n            `}\n\n        justify-content: center;\n      `}\n    `;\n  }}\n`;\n","import styled from \"@emotion/styled\";\nimport {\n  CommonThemeProps,\n  fontHeader,\n  getSemanticColors,\n  getSpaces,\n} from \"../styles\";\nimport { css } from \"@mui/material\";\n\ninterface ExtraFooterProps extends CommonThemeProps {\n  hasInvertedStyle?: boolean;\n  isNarrow?: boolean;\n}\n\nconst doNotForwardProps = [\"hasInvertedStyle\", \"isNarrow\"];\n\nexport const StyledFooter = styled(\"footer\", {\n  shouldForwardProp: (prop) => !doNotForwardProps.includes(prop as string),\n})`\n  ${(props: ExtraFooterProps) => {\n    const { isNarrow } = props;\n\n    const spaces = getSpaces(props);\n    const semanticColors = getSemanticColors(props);\n\n    return css`\n      background: ${props.hasInvertedStyle\n        ? semanticColors?.base.backgroundPrimaryInverse\n        : semanticColors?.base.backgroundPrimary};\n      padding: ${spaces?.xxl}px ${spaces?.xxl}px ${spaces?.xl}px\n        ${spaces?.xxl}px;\n\n      ${isNarrow &&\n      css`\n        border-top: 1px solid\n          ${props.hasInvertedStyle\n            ? semanticColors?.base.dividerInverse\n            : semanticColors?.base.divider};\n        padding: ${spaces?.xl}px ${spaces?.xl}px ${spaces?.l}px ${spaces?.xl}px;\n      `}\n    `;\n  }}\n`;\n\nexport const StyledLogoWrapper = styled(\"div\", {\n  shouldForwardProp: (prop) => !doNotForwardProps.includes(prop as string),\n})`\n  ${(props: ExtraFooterProps) => {\n    const spaces = getSpaces(props);\n\n    return css`\n      display: flex;\n      align-items: center;\n      gap: ${spaces?.s}px;\n\n      a {\n        text-decoration: none;\n      }\n\n      .MuiChip-root {\n        margin: 0;\n      }\n    `;\n  }}\n\n  p {\n    ${fontHeader(\"l\")}\n    ${fontHeader(\"l\", /* isNarrow */ true)}\n\n    ${(props: ExtraFooterProps) => {\n      const semanticColors = getSemanticColors(props);\n\n      return css`\n        color: ${props.hasInvertedStyle\n          ? semanticColors?.base.textPrimaryInverse\n          : semanticColors?.base.textPrimary};\n        white-space: nowrap;\n      `;\n    }}\n  }\n`;\n\nexport const StyledNavSection = styled(\"div\", {\n  shouldForwardProp: (prop) => !doNotForwardProps.includes(prop as string),\n})`\n  ${(props: ExtraFooterProps) => {\n    const { isNarrow } = props;\n\n    const spaces = getSpaces(props);\n\n    return css`\n      display: flex;\n      align-items: center;\n      padding-left: ${spaces?.l}px;\n      gap: ${spaces?.xxl}px;\n\n      ${isNarrow &&\n      css`\n        flex-direction: column;\n        gap: 0;\n        margin-top: ${spaces?.xl}px;\n        width: 100%;\n        padding-left: 0;\n      `}\n    `;\n  }}\n`;\n\nexport const StyledTopSection = styled(\"div\", {\n  shouldForwardProp: (prop) => !doNotForwardProps.includes(prop as string),\n})`\n  ${(props: ExtraFooterProps) => {\n    const { isNarrow } = props;\n\n    const semanticColors = getSemanticColors(props);\n    const spaces = getSpaces(props);\n\n    return css`\n      align-items: center;\n      display: flex;\n      justify-content: space-between;\n      margin-bottom: ${spaces?.xl}px;\n\n      a:hover {\n        text-decoration: none;\n      }\n\n      color: ${props.hasInvertedStyle\n        ? semanticColors?.base.textSecondaryInverse\n        : semanticColors?.base.textSecondary};\n\n      &:hover {\n        color: ${props.hasInvertedStyle\n          ? semanticColors?.base.textPrimaryInverse\n          : semanticColors?.base.textPrimary};\n        text-decoration: none;\n      }\n\n      ${isNarrow &&\n      css`\n        flex-direction: column;\n        margin-bottom: ${spaces?.xl}px;\n      `}\n    `;\n  }}\n`;\n\nexport const StyledLinkSection = styled(\"div\", {\n  shouldForwardProp: (prop) => !doNotForwardProps.includes(prop as string),\n})`\n  align-items: center;\n  display: flex;\n\n  .MuiDivider-root {\n    height: 18px;\n  }\n\n  ${(props: ExtraFooterProps) => {\n    const { isNarrow } = props;\n\n    const spaces = getSpaces(props);\n\n    return css`\n      gap: ${spaces?.s}px;\n\n      ${isNarrow &&\n      css`\n        margin-top: ${spaces?.xl}px;\n        flex-direction: column;\n      `}\n    `;\n  }}\n`;\n\nexport const StyledMobileLinkRow = styled.div`\n  align-items: center;\n  display: flex;\n\n  ${(props: CommonThemeProps) => {\n    const spaces = getSpaces(props);\n\n    return `\n      gap: ${spaces?.s}px;\n    `;\n  }}\n`;\n\nexport const StyledImageSection = styled(\"div\", {\n  shouldForwardProp: (prop) => !doNotForwardProps.includes(prop as string),\n})`\n  align-items: center;\n  display: flex;\n\n  ${(props: ExtraFooterProps) => {\n    const { isNarrow } = props;\n\n    const spaces = getSpaces(props);\n\n    return css`\n      padding-left: ${spaces?.l}px;\n      gap: ${spaces?.xxl}px;\n\n      ${isNarrow &&\n      css`\n        padding-left: 0;\n        gap: ${spaces?.xl}px;\n        flex-direction: column;\n        justify-content: center;\n      `}\n    `;\n  }}\n`;\n\nexport const StyledMobileImageRow = styled.div`\n  align-items: center;\n  display: flex;\n\n  ${(props: CommonThemeProps) => {\n    const spaces = getSpaces(props);\n\n    return `\n      gap: ${spaces?.xl}px;\n    `;\n  }}\n`;\n\nexport const StyledBottomSection = styled(\"div\", {\n  shouldForwardProp: (prop) => !doNotForwardProps.includes(prop as string),\n})`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  a:hover {\n    text-decoration: none;\n  }\n\n  ${(props: ExtraFooterProps) => {\n    const { isNarrow } = props;\n\n    const spaces = getSpaces(props);\n\n    return css`\n      margin-top: ${spaces?.l}px;\n\n      ${isNarrow &&\n      css`\n        flex-direction: column-reverse;\n        margin-top: ${spaces?.xl}px;\n      `}\n    `;\n  }}\n`;\n","import { SerializedStyles } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport { css } from \"@mui/material\";\nimport Link from \"src/core/Link\";\nimport {\n  CommonThemeProps,\n  fontBody,\n  fontHeader,\n  getSemanticColors,\n} from \"src/core/styles\";\n\ninterface NavItemStyleProps extends CommonThemeProps {\n  hasInvertedStyle?: boolean;\n  isNarrow?: boolean;\n}\n\nconst doNotForwardProps = [\"hasInvertedStyle\", \"isNarrow\"];\n\nconst NarrowNavItemLinkStyles = (\n  props: NavItemStyleProps\n): SerializedStyles => {\n  const semanticColors = getSemanticColors(props);\n\n  return css`\n    min-height: 48px;\n    text-align: center;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    &:hover {\n      color: ${props.hasInvertedStyle\n        ? semanticColors?.base.textPrimaryInverse\n        : semanticColors?.base.textPrimary};\n      background: ${props.hasInvertedStyle\n        ? semanticColors?.base.backgroundSecondaryInverse\n        : semanticColors?.base.backgroundSecondary};\n    }\n  `;\n};\n\nexport const StyledNavItemLink = styled(Link, {\n  shouldForwardProp: (prop) => !doNotForwardProps.includes(prop as string),\n})`\n  ${fontHeader(\"m\")}\n  ${fontBody(\"s\", \"regular\", /* isNarrow */ true)}\n\n  ${(props: NavItemStyleProps) => {\n    const { isNarrow } = props;\n\n    const semanticColors = getSemanticColors(props);\n\n    return css`\n      color: ${props.hasInvertedStyle\n        ? semanticColors?.base.textSecondaryInverse\n        : semanticColors?.base.textSecondary};\n      white-space: nowrap;\n\n      &:hover {\n        color: ${props.hasInvertedStyle\n          ? semanticColors?.base.textPrimaryInverse\n          : semanticColors?.base.textPrimary};\n        text-decoration: none;\n        font-weight: 600;\n      }\n\n      ${isNarrow && NarrowNavItemLinkStyles(props)}\n    `;\n  }}\n`;\n"],"names":[],"sourceRoot":""}