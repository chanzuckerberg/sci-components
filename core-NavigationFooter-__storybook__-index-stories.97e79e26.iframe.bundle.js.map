{"version":3,"file":"core-NavigationFooter-__storybook__-index-stories.97e79e26.iframe.bundle.js","mappings":";AA0BA;AAGA;AACA;;AAEA;;AAGA;AAGA;;AAEA;;;AAaA;;;;;;;;;AASA;AAWA;;AAIA;;;AAgBA;AACA;;AAEA;;;AAIA;;;;AAIA;;;;AAiBA;;;;;;AAMA;;;AAKA;;;;AAMA;;AAGA;;AAEA;AAoBA;;AAEA;AAEA;;;AAGA;AA+BA;AACA;;AAEA;;AAGA;;;;AAIA;AAoCA;;AAEA;;AAGA;;AAEA;ACxMA;;;;AAMA;;;;;AAOA;;;;;;;;;AAnCA;AAGA;;AAIA;AA6BA;ACvCA;;;;;AAOA;;;;AAMA;;;;;AAMA;;;;AAIA;AACA;;;AAKA","sources":["webpack://@czi-sds/monorepo/./packages/components/src/core/NavigationFooter/style.ts","webpack://@czi-sds/monorepo/./packages/components/src/core/NavigationFooter/components/NavItem/style.ts","webpack://@czi-sds/monorepo/./packages/components/src/core/NavigationFooter/components/FooterLink/style.ts"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport {\n  CommonThemeProps,\n  fontHeader,\n  getSemanticColors,\n  getSpaces,\n} from \"../styles\";\nimport { css } from \"@mui/material\";\n\ninterface ExtraFooterProps extends CommonThemeProps {\n  hasInvertedStyle?: boolean;\n  isNarrow?: boolean;\n}\n\nconst doNotForwardProps = [\"hasInvertedStyle\", \"isNarrow\"];\n\nexport const StyledFooter = styled(\"footer\", {\n  shouldForwardProp: (prop) => !doNotForwardProps.includes(prop as string),\n})`\n  ${(props: ExtraFooterProps) => {\n    const { isNarrow } = props;\n\n    const spaces = getSpaces(props);\n    const semanticColors = getSemanticColors(props);\n\n    return css`\n      background: ${props.hasInvertedStyle\n        ? semanticColors?.base.backgroundPrimaryInverse\n        : semanticColors?.base.backgroundPrimary};\n      padding: ${spaces?.xxl}px ${spaces?.xxl}px ${spaces?.xl}px\n        ${spaces?.xxl}px;\n\n      ${isNarrow &&\n      css`\n        border-top: 1px solid\n          ${props.hasInvertedStyle\n            ? semanticColors?.base.dividerInverse\n            : semanticColors?.base.divider};\n        padding: ${spaces?.xl}px ${spaces?.xl}px ${spaces?.l}px ${spaces?.xl}px;\n      `}\n    `;\n  }}\n`;\n\nexport const StyledLogoWrapper = styled(\"div\", {\n  shouldForwardProp: (prop) => !doNotForwardProps.includes(prop as string),\n})`\n  ${(props: ExtraFooterProps) => {\n    const spaces = getSpaces(props);\n\n    return css`\n      display: flex;\n      align-items: center;\n      gap: ${spaces?.s}px;\n\n      a {\n        text-decoration: none;\n      }\n\n      .MuiChip-root {\n        margin: 0;\n      }\n    `;\n  }}\n\n  p {\n    ${fontHeader(\"l\")}\n    ${fontHeader(\"l\", /* isNarrow */ true)}\n\n    ${(props: ExtraFooterProps) => {\n      const semanticColors = getSemanticColors(props);\n\n      return css`\n        color: ${props.hasInvertedStyle\n          ? semanticColors?.base.textPrimaryInverse\n          : semanticColors?.base.textPrimary};\n        white-space: nowrap;\n      `;\n    }}\n  }\n`;\n\nexport const StyledNavSection = styled(\"div\", {\n  shouldForwardProp: (prop) => !doNotForwardProps.includes(prop as string),\n})`\n  ${(props: ExtraFooterProps) => {\n    const { isNarrow } = props;\n\n    const spaces = getSpaces(props);\n\n    return css`\n      display: flex;\n      align-items: center;\n      padding-left: ${spaces?.l}px;\n      gap: ${spaces?.xxl}px;\n\n      ${isNarrow &&\n      css`\n        flex-direction: column;\n        gap: 0;\n        margin-top: ${spaces?.xl}px;\n        width: 100%;\n        padding-left: 0;\n      `}\n    `;\n  }}\n`;\n\nexport const StyledTopSection = styled(\"div\", {\n  shouldForwardProp: (prop) => !doNotForwardProps.includes(prop as string),\n})`\n  ${(props: ExtraFooterProps) => {\n    const { isNarrow } = props;\n\n    const semanticColors = getSemanticColors(props);\n    const spaces = getSpaces(props);\n\n    return css`\n      align-items: center;\n      display: flex;\n      justify-content: space-between;\n      margin-bottom: ${spaces?.xl}px;\n\n      a:hover {\n        text-decoration: none;\n      }\n\n      color: ${props.hasInvertedStyle\n        ? semanticColors?.base.textSecondaryInverse\n        : semanticColors?.base.textSecondary};\n\n      &:hover {\n        color: ${props.hasInvertedStyle\n          ? semanticColors?.base.textPrimaryInverse\n          : semanticColors?.base.textPrimary};\n        text-decoration: none;\n      }\n\n      ${isNarrow &&\n      css`\n        flex-direction: column;\n        margin-bottom: ${spaces?.xl}px;\n      `}\n    `;\n  }}\n`;\n\nexport const StyledLinkSection = styled(\"div\", {\n  shouldForwardProp: (prop) => !doNotForwardProps.includes(prop as string),\n})`\n  align-items: center;\n  display: flex;\n\n  .MuiDivider-root {\n    height: 18px;\n  }\n\n  ${(props: ExtraFooterProps) => {\n    const { isNarrow } = props;\n\n    const spaces = getSpaces(props);\n\n    return css`\n      gap: ${spaces?.l}px;\n\n      ${isNarrow &&\n      css`\n        margin-top: ${spaces?.xl}px;\n        flex-direction: column;\n      `}\n    `;\n  }}\n`;\n\nexport const StyledMobileLinkRow = styled.div`\n  align-items: center;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n\n  ${(props: CommonThemeProps) => {\n    const spaces = getSpaces(props);\n\n    return `\n      gap: ${spaces?.l}px;\n    `;\n  }}\n`;\n\nexport const StyledImageSection = styled(\"div\", {\n  shouldForwardProp: (prop) => !doNotForwardProps.includes(prop as string),\n})`\n  align-items: center;\n  display: flex;\n\n  ${(props: ExtraFooterProps) => {\n    const { isNarrow } = props;\n\n    const spaces = getSpaces(props);\n\n    return css`\n      padding-left: ${spaces?.l}px;\n      gap: ${spaces?.xxl}px;\n\n      ${isNarrow &&\n      css`\n        padding-left: 0;\n        gap: ${spaces?.xl}px;\n        flex-direction: column;\n        justify-content: center;\n      `}\n    `;\n  }}\n`;\n\nexport const StyledMobileImageRow = styled.div`\n  align-items: center;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n\n  ${(props: CommonThemeProps) => {\n    const spaces = getSpaces(props);\n\n    return `\n      gap: ${spaces?.xl}px;\n    `;\n  }}\n`;\n\nexport const StyledBottomSection = styled(\"div\", {\n  shouldForwardProp: (prop) => !doNotForwardProps.includes(prop as string),\n})`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  a:hover {\n    text-decoration: none;\n  }\n\n  ${(props: ExtraFooterProps) => {\n    const { isNarrow } = props;\n\n    const spaces = getSpaces(props);\n\n    return css`\n      margin-top: ${spaces?.l}px;\n\n      ${isNarrow &&\n      css`\n        flex-direction: column-reverse;\n        margin-top: ${spaces?.xl}px;\n      `}\n    `;\n  }}\n`;\n","import { SerializedStyles } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport { css } from \"@mui/material\";\nimport Link from \"src/core/Link\";\nimport {\n  CommonThemeProps,\n  fontBody,\n  fontHeader,\n  getSemanticColors,\n} from \"src/core/styles\";\n\ninterface NavItemStyleProps extends CommonThemeProps {\n  hasInvertedStyle?: boolean;\n  isNarrow?: boolean;\n}\n\nconst doNotForwardProps = [\"hasInvertedStyle\", \"isNarrow\"];\n\nconst NarrowNavItemLinkStyles = (\n  props: NavItemStyleProps\n): SerializedStyles => {\n  const semanticColors = getSemanticColors(props);\n\n  return css`\n    min-height: 48px;\n    text-align: center;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    &:hover {\n      color: ${props.hasInvertedStyle\n        ? semanticColors?.base.textPrimaryInverse\n        : semanticColors?.base.textPrimary};\n      background: ${props.hasInvertedStyle\n        ? semanticColors?.base.backgroundSecondaryInverse\n        : semanticColors?.base.backgroundSecondary};\n    }\n  `;\n};\n\nexport const StyledNavItemLink = styled(Link, {\n  shouldForwardProp: (prop) => !doNotForwardProps.includes(prop as string),\n})`\n  ${fontHeader(\"m\")}\n  ${fontBody(\"s\", \"regular\", /* isNarrow */ true)}\n\n  ${(props: NavItemStyleProps) => {\n    const { isNarrow } = props;\n\n    const semanticColors = getSemanticColors(props);\n\n    return css`\n      color: ${props.hasInvertedStyle\n        ? semanticColors?.base.textSecondaryInverse\n        : semanticColors?.base.textSecondary};\n      white-space: nowrap;\n\n      &:hover {\n        color: ${props.hasInvertedStyle\n          ? semanticColors?.base.textPrimaryInverse\n          : semanticColors?.base.textPrimary};\n        text-decoration: none;\n        font-weight: 600;\n      }\n\n      ${isNarrow && NarrowNavItemLinkStyles(props)}\n    `;\n  }}\n`;\n","import styled from \"@emotion/styled\";\nimport Link from \"../../../Link\";\nimport { css, Divider } from \"@mui/material\";\nimport {\n  CommonThemeProps,\n  fontBody,\n  getSemanticColors,\n  getSpaces,\n} from \"src/core/styles\";\n\ninterface FooterLinkStyleProps extends CommonThemeProps {\n  hasInvertedStyle?: boolean;\n  showDivider?: boolean;\n}\n\nconst doNotForwardProps = [\"hasInvertedStyle\", \"showDivider\"];\n\nexport const StyledLinkItemLink = styled(Link, {\n  shouldForwardProp: (prop) => !doNotForwardProps.includes(prop as string),\n})`\n  ${fontBody(\"xxs\", \"regular\")}\n\n  ${(props: FooterLinkStyleProps) => {\n    const { showDivider, hasInvertedStyle } = props;\n\n    const spaces = getSpaces(props);\n    const semanticColors = getSemanticColors(props);\n\n    return css`\n      color: ${hasInvertedStyle\n        ? semanticColors?.base.textSecondaryInverse\n        : semanticColors?.base.textSecondary};\n      white-space: nowrap;\n      position: relative;\n\n      &:hover {\n        color: ${hasInvertedStyle\n          ? semanticColors?.base.textPrimaryInverse\n          : semanticColors?.base.textPrimary};\n        text-decoration: none;\n      }\n\n      ${showDivider &&\n      css`\n        &:after {\n          content: \"\";\n          position: absolute;\n          top: 0;\n          right: -${spaces?.s}px;\n          display: block;\n          height: 100%;\n          width: 1px;\n          margin-left: ${spaces?.s}px;\n          background-color: ${hasInvertedStyle\n            ? semanticColors?.base.dividerInverse\n            : semanticColors?.base.divider};\n        }\n      `}\n    `;\n  }}\n`;\n\nexport const StyledDivider = styled(Divider, {\n  shouldForwardProp: (prop) => !doNotForwardProps.includes(prop as string),\n})`\n  ${(props: FooterLinkStyleProps) => {\n    const semanticColors = getSemanticColors(props);\n\n    return `\n      border-color: ${\n        props.hasInvertedStyle\n          ? semanticColors?.base.dividerInverse\n          : semanticColors?.base.divider\n      };\n    `;\n  }}\n`;\n"],"names":[],"sourceRoot":""}