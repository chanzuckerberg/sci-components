{"version":3,"file":"9131.4153bfe8.iframe.bundle.js","mappings":";;;;AAgFA;;AAEA;;AA7BA;AAGA;;;;;;;AASA;;AAmBA;AA+FA;AAxBA;;AAEA;;;;;;;AAOA;;AAEA;;;AAGA;AAWA;;AAWA;;;;;;;;AAQA;;;AAGA;AAUA;;AAEA;AAeA;AACA;AA+BA;AACA;AAGA;;;AAGA;;;;;;AACA;AA6DA;AACA;AACA;;AAEA;AAGA;AA2BA;AACA;;AAEA;;AAIA;;;;;AAOA;;;;;;;;AAUA;;;;;;;AASA;;;;;;AAQA;;;;;;;;AAUA;;;;;;AAQA;;;;;;;;AAUA;;;;;;AAQA;;;;;;AAQA;AA+DA;AACA;;AAEA;AApDA;AACA;;;AAGA;AACA;;;;;;;AAOA;;;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;AAEA;AA2BA;AA8BA;;AAEA;AC9gBA;AAaA","sources":["webpack://@czi-sds/monorepo/./packages/components/src/core/NavigationHeader/style.ts","webpack://@czi-sds/monorepo/./packages/components/src/core/NavigationHeader/components/ElevationScroll/index.tsx"],"sourcesContent":["import { AppBar, Drawer, Toolbar, css } from \"@mui/material\";\nimport {\n  CommonThemeProps,\n  fontBody,\n  fontHeader,\n  getIconSizes,\n  getSemanticColors,\n  getShadows,\n  getSpaces,\n} from \"../styles\";\nimport Tag from \"../Tag\";\nimport InputSearch from \"../InputSearch\";\nimport styled from \"@emotion/styled\";\nimport Link from \"../Link\";\nimport Button, { SdsButtonProps, SdsMinimalButtonProps } from \"../Button\";\nimport { SerializedStyles } from \"@emotion/react\";\nimport { IconButtonProps } from \"./NavigationHeader.types\";\n\nexport interface ExtraHeaderProps extends CommonThemeProps {\n  hasInvertedStyle?: boolean;\n  isNarrow?: boolean;\n}\n\nconst doNotForwardProps = [\n  \"hasInvertedStyle\",\n  \"isNarrow\",\n  \"primaryNavPosition\",\n  \"showSearch\",\n  \"logoLinkComponent\",\n  \"logoLinkProps\",\n];\n\nexport const StyledAppBar = styled(AppBar, {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  ${(props: ExtraHeaderProps) => {\n    const colors = getSemanticColors(props);\n\n    return `\n      background-color: ${props.hasInvertedStyle ? colors?.base.backgroundPrimaryInverse : colors?.base.backgroundPrimary};\n      background-image: none;\n      max-width: 100%;\n      max-height: 56px;\n      overflow-x: auto;\n    `;\n  }}\n`;\n\nconst NarrowToolbar = (props: ExtraHeaderProps): SerializedStyles => {\n  const semanticColors = getSemanticColors(props);\n\n  return css`\n    border-bottom: 1px solid\n      ${props.hasInvertedStyle\n        ? semanticColors?.base.dividerInverse\n        : semanticColors?.base.divider};\n    background-color: ${props.hasInvertedStyle\n      ? semanticColors?.base.backgroundPrimaryInverse\n      : semanticColors?.base.backgroundPrimary};\n    background-image: none;\n    box-shadow: none;\n    position: sticky !important;\n    top: 0;\n    z-index: 1000;\n    justify-content: space-between;\n  `;\n};\n\nexport const StyledToolbar = styled(Toolbar, {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  ${(props: ExtraHeaderProps) => {\n    const { isNarrow } = props;\n\n    const spaces = getSpaces(props);\n\n    return css`\n      &.MuiToolbar-root {\n        min-height: 56px;\n        max-height: 56px;\n        padding: ${spaces?.m}px ${spaces?.xl}px;\n\n        ${isNarrow && NarrowToolbar(props)}\n      }\n    `;\n  }}\n`;\n\nexport const StyledShadowElement = styled(\"div\", {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  ${(props: ExtraHeaderProps) => {\n    const shadows = getShadows(props);\n\n    return `\n      box-shadow: ${shadows?.m};\n      height: 10px;\n      display: block;\n      position: fixed;\n      width: 100%;\n      top: 46px;\n      left: 0;\n      z-index: 100;\n    `;\n  }}\n`;\n\nexport const StyledShadowCoverElement = styled(\"div\", {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  ${(props: ExtraHeaderProps) => {\n    const colors = getSemanticColors(props);\n\n    return `\n      background: ${props.hasInvertedStyle ? colors?.base.backgroundPrimaryInverse : colors?.base.backgroundPrimary};\n      height: 10px;\n      display: block;\n      position: absolute;\n      width: 100%;\n      top: 56px;\n      left: 0;\n      z-index: 100;\n    `;\n  }}\n`;\n\nexport interface ExtraButtonProps extends CommonThemeProps {\n  hasInvertedStyle?: boolean;\n}\n\nexport const StyledHeaderButton = styled(Button, {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})<ExtraButtonProps & (SdsMinimalButtonProps | SdsButtonProps)>`\n  ${(props) => {\n    const { sdsType, hasInvertedStyle } = props;\n    const mode = props?.theme?.palette?.mode || \"light\";\n    const semanticColors = getSemanticColors(props);\n\n    const secondaryButtonStyles = `\n      box-shadow: inset 0 0 0 1px ${mode === \"light\" ? \"white\" : semanticColors?.accent?.fillPrimary};\n      color: ${mode === \"light\" ? \"white\" : semanticColors?.accent?.fillPrimary};\n    `;\n\n    return `\n      ${sdsType === \"secondary\" && hasInvertedStyle ? secondaryButtonStyles : \"\"}\n    `;\n  }}\n`;\n\nconst invertedNarrowButtonStyles = (\n  props: ExtraButtonProps & (SdsMinimalButtonProps | SdsButtonProps)\n): SerializedStyles => {\n  const semanticColors = getSemanticColors(props);\n\n  return css`\n    color: ${semanticColors?.base?.textPrimaryInverse};\n    svg {\n      fill: ${semanticColors?.base?.ornamentPrimaryInverse};\n    }\n\n    &:hover,\n    &:focus,\n    &:active,\n    &:focus-within {\n      color: ${semanticColors?.base?.textPrimaryInverse};\n      svg {\n        fill: ${semanticColors?.base?.ornamentPrimaryInverse};\n      }\n    }\n  `;\n};\n\nexport const StyledNarrowIconButton = styled(Button, {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})<ExtraButtonProps & (SdsMinimalButtonProps | SdsButtonProps)>`\n  ${(props) => {\n    const { hasInvertedStyle } = props;\n\n    return css`\n      ${hasInvertedStyle && invertedNarrowButtonStyles(props)}\n    `;\n  }}\n`;\n\nconst invertedWideButtonStyles = (\n  props: ExtraButtonProps & IconButtonProps\n): SerializedStyles => {\n  const semanticColors = getSemanticColors(props);\n\n  return css`\n    svg {\n      fill: ${semanticColors?.base?.ornamentSecondaryInverse};\n    }\n\n    &:hover,\n    &:focus,\n    &:active,\n    &:focus-within {\n      svg {\n        fill: ${semanticColors?.base?.ornamentPrimaryInverse};\n      }\n    }\n  `;\n};\n\nexport const StyledWideIconButton = styled(Button, {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})<ExtraButtonProps & IconButtonProps>`\n  ${(props) => {\n    const { hasInvertedStyle } = props;\n\n    return css`\n      ${hasInvertedStyle && invertedWideButtonStyles(props)}\n      margin: 0;\n    `;\n  }}\n`;\n\nexport const StyledLogoLinkWrapper = styled(Link, {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  align-items: center;\n  display: flex;\n  text-decoration: none !important;\n\n  ${(props: ExtraHeaderProps) => {\n    const { isNarrow } = props;\n\n    return css`\n      width: ${isNarrow ? \"100%\" : \"auto\"};\n    `;\n  }}\n`;\n\nexport const StyledLogoWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst NarrowTitleContainer = (): SerializedStyles => {\n  return css`\n    p {\n      margin: 0px;\n      margin-block: 0px;\n    }\n  `;\n};\n\nexport const StyledTitleContainer = styled(\"div\", {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  display: flex;\n  align-items: center;\n\n  ${(props: ExtraHeaderProps) => {\n    const { isNarrow } = props;\n\n    const colors = getSemanticColors(props);\n    const spaces = getSpaces(props);\n\n    return css`\n      gap: ${spaces?.l}px;\n      color: ${props.hasInvertedStyle\n        ? colors?.base.textPrimaryInverse\n        : colors?.base.textPrimary};\n      margin-right: ${spaces?.xxl}px;\n      width: 100%;\n\n      ${isNarrow && NarrowTitleContainer()}\n    `;\n  }}\n`;\n\nexport const StyledTitleTagWrapper = styled(\"div\", {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  ${fontHeader(\"l\")}\n  ${fontHeader(\"l\", true)}\n\n  ${(props: ExtraHeaderProps) => {\n    const spaces = getSpaces(props);\n\n    return `\n      display: flex;\n      align-items: center;\n      gap: ${spaces?.xs}px;\n\n      p {\n        white-space: nowrap;\n      }\n  `;\n  }}\n`;\n\nexport const StyledTag = styled(Tag)`\n  margin: 0;\n\n  .MuiChip-label {\n    ${fontBody(\"xxxs\", \"regular\")}\n    ${fontBody(\"xxxs\", \"regular\", /* isNarrow */ true)}\n  }\n\n  &:hover {\n    text-decoration: none;\n  }\n`;\n\ninterface StyledPrimaryNavContainerProps extends CommonThemeProps {\n  primaryNavPosition?: \"left\" | \"right\";\n  showSearch?: boolean;\n  isNarrow?: boolean;\n}\n\nexport const StyledPrimaryNavContainer = styled(\"div\", {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  align-items: center;\n  display: flex;\n  flex-grow: 1;\n\n  ${(props: StyledPrimaryNavContainerProps) => {\n    const { showSearch, primaryNavPosition, isNarrow } = props;\n    const spaces = getSpaces(props);\n\n    const primaryNavPositionWithSearch =\n      primaryNavPosition === \"left\" ? \"flex-start\" : \"space-between\";\n    const primaryNavPositionWithoutSearch =\n      primaryNavPosition === \"left\" ? \"flex-start\" : \"flex-end\";\n\n    return css`\n      flex-direction: ${isNarrow ? \"column\" : \"row\"};\n      gap: ${spaces?.xxl}px;\n      margin-right: ${spaces?.xxl}px;\n      flex: 1;\n      justify-content: ${showSearch\n        ? primaryNavPositionWithSearch\n        : primaryNavPositionWithoutSearch};\n    `;\n  }}\n`;\n\ninterface ExtraSearchProps extends CommonThemeProps {\n  hasInvertedStyle?: boolean;\n  isNarrow?: boolean;\n}\n\nexport const StyledSearch = styled(InputSearch, {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  margin: 0;\n  width: 100%;\n\n  .MuiInputBase-input {\n    ${fontBody(\"xs\", \"regular\")}\n    ${fontBody(\"m\", \"regular\", /* isNarrow */ true)}\n  }\n\n  ${(props: ExtraSearchProps) => {\n    const { hasInvertedStyle, isNarrow } = props;\n\n    const spaces = getSpaces(props);\n    const semanticColors = getSemanticColors(props);\n\n    return css`\n      max-width: ${isNarrow ? \"100%\" : \"320px\"};\n      padding: ${isNarrow ? `${spaces?.m}px ${spaces?.xl}px` : \"\"};\n      .MuiInputBase-root {\n        color: ${hasInvertedStyle\n          ? semanticColors?.base.textPrimaryInverse\n          : semanticColors?.base.textPrimary};\n        fieldset {\n          border-color: ${hasInvertedStyle\n            ? semanticColors?.base?.borderPrimaryInverse\n            : \"\"};\n        }\n\n        .MuiInputBase-input {\n          &::placeholder {\n            color: ${hasInvertedStyle\n              ? semanticColors?.base?.textTertiaryInverse\n              : semanticColors?.base?.textTertiary};\n            opacity: 1;\n          }\n        }\n\n        .MuiInputAdornment-root {\n          .MuiButtonBase-root:last-of-type {\n            svg {\n              color: ${hasInvertedStyle\n                ? semanticColors?.base?.ornamentSecondaryInverse\n                : \"\"};\n            }\n          }\n        }\n\n        &:hover {\n          fieldset {\n            border-color: ${hasInvertedStyle\n              ? semanticColors?.base?.borderPrimaryHoverInverse\n              : \"\"} !important;\n          }\n\n          .MuiInputAdornment-root {\n            .MuiButtonBase-root:last-of-type {\n              svg {\n                color: ${hasInvertedStyle\n                  ? semanticColors?.base?.ornamentPrimaryInverse\n                  : \"\"};\n              }\n            }\n          }\n        }\n\n        &.Mui-focused {\n          fieldset {\n            border-color: ${hasInvertedStyle\n              ? semanticColors?.base?.borderPrimaryPressedInverse\n              : \"\"} !important;\n          }\n\n          .MuiInputAdornment-root {\n            .MuiButtonBase-root:last-of-type {\n              svg {\n                color: ${hasInvertedStyle\n                  ? semanticColors?.base?.ornamentPrimaryInverse\n                  : \"\"};\n              }\n            }\n          }\n        }\n\n        &.Mui-disabled {\n          fieldset {\n            border-color: ${hasInvertedStyle\n              ? semanticColors?.base?.borderPrimaryDisabledInverse\n              : \"\"} !important;\n          }\n\n          .MuiInputAdornment-root {\n            .MuiButtonBase-root:last-of-type {\n              svg {\n                color: ${hasInvertedStyle\n                  ? semanticColors?.base?.ornamentDisabledInverse\n                  : \"\"};\n              }\n            }\n          }\n        }\n      }\n    `;\n  }}\n`;\n\nconst NarrowButtonStyles = (props: ExtraHeaderProps): SerializedStyles => {\n  const spaces = getSpaces(props);\n  const sizes = getIconSizes(props);\n  const colors = getSemanticColors(props);\n\n  const backgroundColor = props.hasInvertedStyle\n    ? colors?.base.backgroundPrimaryInverse\n    : colors?.base.backgroundPrimary;\n\n  return css`\n    background: ${backgroundColor};\n    gap: ${spaces?.l}px;\n    flex-direction: column;\n    margin-left: 0;\n    margin-top: ${spaces?.xxl}px;\n    padding: ${spaces?.xl}px;\n    position: sticky;\n    bottom: 0;\n\n    &::before {\n      content: \"\";\n      position: absolute;\n      height: ${spaces?.xxl}px;\n      width: 100%;\n      background: linear-gradient(\n        to top,\n        ${backgroundColor} 0%,\n        ${backgroundColor}00 100%\n      );\n      top: -${spaces?.xxl}px;\n    }\n\n    .MuiButton-icon .MuiSvgIcon-root {\n      width: ${sizes?.l.width}px;\n      height: ${sizes?.l.height}px;\n    }\n  `;\n};\n\nexport const StyledButtonSection = styled(\"section\", {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  display: flex;\n  align-items: center;\n\n  .MuiButtonBase-root {\n    ${fontBody(\"l\", \"semibold\", /* isNarrow */ true)}\n  }\n\n  [data-style=\"minimal\"] {\n    ${fontBody(\"m\", \"semibold\", /* isNarrow */ true)}\n  }\n\n  ${(props: ExtraHeaderProps) => {\n    const { isNarrow } = props;\n\n    const spaces = getSpaces(props);\n\n    return css`\n      gap: ${spaces?.m}px;\n      margin-left: ${spaces?.xxl}px;\n\n      ${isNarrow && NarrowButtonStyles(props)}\n    `;\n  }}\n`;\n\nexport const StyledDrawer = styled(Drawer, {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  ${(props: ExtraHeaderProps) => {\n    const colors = getSemanticColors(props);\n\n    return `\n      .MuiDrawer-paper {\n        background: ${props.hasInvertedStyle ? colors?.base.backgroundPrimaryInverse : colors?.base.backgroundPrimary};\n        width: 100%;\n        display: flex;\n        flex-direction: column;\n        min-height: 100dvh;\n        justify-content: space-between;\n      }\n    `;\n  }}\n`;\n\nexport const StyledNarrowButton = styled(Button, {\n  shouldForwardProp: (prop: string) => !doNotForwardProps.includes(prop),\n})`\n  ${(props: ExtraButtonProps & IconButtonProps) => {\n    const { hasInvertedStyle } = props;\n\n    return css`\n      ${hasInvertedStyle && invertedWideButtonStyles(props)}\n      margin: 0;\n    `;\n  }}\n`;\n","import { AppBarProps, css, useScrollTrigger, useTheme } from \"@mui/material\";\nimport React from \"react\";\nimport { CommonThemeProps } from \"src/core/styles\";\n\ninterface ElevationScrollProps extends CommonThemeProps, AppBarProps {\n  window?: () => Window;\n  children?: React.ReactElement;\n  shouldElevate?: boolean;\n}\n\nfunction ElevationScroll(elevationProps: ElevationScrollProps) {\n  const { children, window, shouldElevate = true } = elevationProps;\n  const theme = useTheme();\n  const mode = theme.palette.mode;\n\n  const trigger = useScrollTrigger({\n    disableHysteresis: true,\n    target: window ? window() : undefined,\n    threshold: 0,\n  });\n\n  const darkModeStyles = css`\n    border-bottom: 1px solid ${theme.palette?.sds?.base?.borderSecondary};\n  `;\n\n  /**\n   * (masoudmanson): Elevation is set to 10 when the user scrolls and 0 otherwise.\n   * MUI's elevation range is 0-24, but in the SDS theme, we have mapped:\n   * - shadow.none to 0\n   * - shadow.S to values 1-8\n   * - shadow.M to values 9-16\n   * - shadow.L to values 17-24\n   *\n   * Since the navigation requires a shadow.M drop shadow based on the design system,\n   * any elevation value between 9 and 16 will produce the same effect.\n   */\n  return children\n    ? React.cloneElement(children, {\n        elevation: trigger && shouldElevate ? 14 : 0,\n        sx:\n          trigger && shouldElevate\n            ? {\n                ...(elevationProps.sx || {}),\n                ...(mode === \"dark\" && darkModeStyles),\n              }\n            : undefined,\n      })\n    : null;\n}\n\nexport default ElevationScroll;\n"],"names":[],"sourceRoot":""}